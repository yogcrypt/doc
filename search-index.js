var N = null;var searchIndex = {};
searchIndex["yogcrypt"]={"doc":"A fast, general purpose crypto library in pure Rust.","items":[[0,"sm2","yogcrypt","An implementation of the SM2 signature standard.",N,N],[3,"U64x4","yogcrypt::sm2","A 256-bit number represented using four `u64`'s.",N,N],[12,"value","","",0,N],[3,"Signature","","A signature (tag) consists of two fields: `r` and `s`, each is a 256 bit number",N,N],[12,"r","","",1,N],[12,"s","","",1,N],[5,"get_sec_key","","Randomly sample secret key uniformly from [0,..n), where n is the order of the base point",N,[[],["seckey"]]],[5,"get_pub_key","","Compute public key from secret key",N,[[["seckey"]],["pubkey"]]],[5,"sm2_gen_sign","","Generate a valid signature for a message using a pair of keys.",N,N],[5,"sm2_ver_sign","","Verify a signature on a given message using public key",N,N],[6,"Coordinate","","A coordinate is an element from the field with order `MODULO_P`.",N,N],[6,"PubKey","","A public key is a point on the elliptic curve group.",N,N],[6,"SecKey","","A secret key is an element from the field with order `MODULO_N`.",N,N],[0,"sm3","yogcrypt","An implementation of the SM3 cryptographic hash standard.",N,N],[5,"sm3_enc","yogcrypt::sm3","Compute the hash of the given message",N,N],[6,"HashValue","","",N,N],[0,"sm4","yogcrypt","An implementation of the SM4 block cipher standard.",N,N],[5,"get_sm4_r_k","yogcrypt::sm4","Compute round keys from a given key.",N,N],[5,"sm4_enc","","Encrypt `p_txt` under `sk`",N,[[["key"],["block"]],["block"]]],[5,"sm4_enc_inner","","Core function for sm4 encryption",N,N],[5,"sm4_dec","","Decrypt `c_txt` using `sk`",N,[[["key"],["block"]],["block"]]],[5,"sm4_dec_inner","","Core function of sm4 decryption",N,N],[6,"Key","","",N,N],[6,"Block","","",N,N],[17,"BLOCK_SIZE","","",N,N],[17,"KEY_SIZE","","",N,N],[17,"RND_KEY_SIZE","","",N,N],[11,"into","yogcrypt::sm2","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"clone","","",0,[[["self"]],["u64x4"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["u64x4"]],["bool"]]],[11,"ne","","",0,[[["self"],["u64x4"]],["bool"]]],[11,"new","","Create a number with 4 64-bits, with x0 being the less significant digits",0,[[["u64"],["u64"],["u64"],["u64"]],["self"]]],[11,"zero","","The representation for 0",0,[[],["self"]]],[11,"random","","Return a random 256-bit number",0,[[],["self"]]],[11,"from_u32","","Construct the number from 8 `u32`",0,N],[11,"get","","Access the `i`-th lowest bit",0,[[["self"],["usize"]],["u64"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"not","","",0,[[["self"]],["self"]]],[11,"bitand","","",0,[[["self"],["self"]],["self"]]],[11,"bitor","","",0,[[["self"],["self"]],["self"]]],[11,"bitxor","","",0,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",0,[[["self"],["self"]]]],[11,"bitor_assign","","",0,[[["self"],["self"]]]],[11,"bitxor_assign","","",0,[[["self"],["self"]]]],[11,"neg","","",0,[[["self"]],["u64x4"]]],[11,"add","","",0,[[["self"],["u64x4"]],["u64x4"]]],[11,"sub","","",0,[[["self"],["u64x4"]],["u64x4"]]],[11,"left_rotate_to_u64x8","","",0,[[["self"],["usize"]],["u64x8"]]],[11,"left_shift_by_one","","",0,[[["self"]]]],[11,"right_shift_by_one","","",0,[[["self"]]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"equal_to_zero","","",0,[[["self"]],["bool"]]],[11,"equal_to_one","","",0,[[["self"]],["bool"]]],[11,"add_no_mod","","256-bit addition with carry bit",0,N],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]]],"paths":[[3,"U64x4"],[3,"Signature"]]};
initSearch(searchIndex);
